
<html>
<head>
    <meta charset="utf-8">
    <title>c make CMakeLists.txt Demo</title>
    <link rel="stylesheet" type="text/css" href="../css/subcontent.html.min.css">
</head>
<body>
<h2>c make CMakeLists.txt Demo</h2>
<pre>

###########################################
cmake_minimum_required(VERSION 3.15)

#指定c/c++编译器(*必须放在project前面*)
#SET(CMAKE_C_COMPILER gcc)
#SET(CMAKE_CXX_COMPILER '/usr/bin/g++')


project(hi C)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

set(CMAKE_C_STANDARD 11)
set(SOURCE_FILES library.c library.h)

add_executable(hi ${SOURCE_FILES})
###########################################


cmake添加boost组件 参考:https://www.cnblogs.com/magic-428/p/9144492.html
############################################
SET(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} "-std=c++11")
find_package(Boost REQUIRED COMPONENTS
# regex
filesystem   # 添加 boost 的 filesystem 组件
)
if(NOT Boost_FOUND)
    message("Not found Boost")
endif()

################################################

C++ 包管理 (一个类似于Python pip 或者 nodejs npm 的东西 微软的) 并且兼容 Linux/MacOs
https://github.com/Microsoft/vcpkg

###############################################
gdb调试相关：
ps: 
 l 10     从第10行开始显示10行  
b 10    给第10行打断点 如果第10行处在循环中，则自动给每个循环里的if打断点
disp n  打印变量 n

检查内存： 参考 https://blog.csdn.net/yasi_xi/article/details/7322278

###############################################

c语言返回局部变量的几种形式
参考： https://www.cnblogs.com/iriczhao/p/11949910.html   (ps:该博客内容不保证可靠，不保证在任意平台正确执行)
返回指向int类型的执政变量 报警告： 
 warning: function returns address of local variable [-Wreturn-local-addr]
给 gcc 加上 -Wreturn-local-addr 执行后同样报段错误
20200218电话面试的丢丢思考：对于2020/02/18的我而言，函数内的局部变量在函数消亡后在内存中的存在形式任然是一个谜？
如果c编译器在函数消亡后把该块内存置为零，某些黑客是怎么在按下键盘后读取键盘按键的编码呢？
于是激发了我对于  内存检查的思考[https://blog.csdn.net/yasi_xi/article/details/7322278] 
https://www.cnblogs.com/iriczhao/p/11949910.html

###############################################
makefile 基本使用：
code:

make:
    gcc -o hello hello.c 
clean:
    rm hello 

运行 make 即执行 gcc -o hello hello.c  
运行 make clean 即执行 clean 内容 

gcc -E 生成预处理的 .i 文件  处理 '#' 号后面的内容
gcc -S 生成（其实是编译的最核心过程,也叫编译） 成 .s 文件，也就是翻译成汇编文件
gcc -c 生成 .o 文件 也叫作 .obj 文件 ，就是汇编的过程
gcc  经过 .o文件可完成最后的link（连接过程,visual studio 中经常报 link.exe 找不到文件的错误，就是这一步骤） 生成可执行文件
参考: https://blog.csdn.net/gt1025814447/article/details/80442673
下面是 clang (Target: x86_64-pc-windows-msvc  Thread model: posix InstalledDir: C:\Program Files\LLVM\bin)的同一过程
clang -E -o hello_c.i hello.c 
clang -S -o hello_c.s hello_c.i
clang -c -o hello_c.o hello_c.s
clang -o hello_c hello_c.o 
经简单测试来看 clang产生的可执行文件是gcc产生的文件大小的将近两倍左右
#######################################################################
生成coredump的方法:
ulimit -c unlimited
cat "/data/coredump/core-%e-%p-%t" proc/sys/kernel/core_pattern   
线程内存泄漏：https://www.cnblogs.com/jkred369/p/6744103.html
#######################################################################
<s>及其危险的代码(排查bug查了半天)
code：错误示例
    char zero[MAX_ZERO_NUM];
    int icntz = 0;       // icntz == 0 时， icntz++ 其实执行了 MAX_ZERO_NUM+1 次， 这导致我的相临内存的数值被更改了，查bug半天
    while(icntz++&lt;MAX_ZERO_NUM)strcat(zero,"0");
code:正确示例
    char zero[MAX_ZERO_NUM];
    int icntz = 1;           // 这是经验  
    while(icntz++&lt;MAX_ZERO_NUM)strcat(zero,"0");
</s>
此处代码bug不在于i++和++i的问题
########################################################################

</pre>
</body>
</html>
